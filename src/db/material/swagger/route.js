import SE from '../../../util/swagger_example.js';

// * Material Info * //
export const pathMaterialInfo = {
	'/material/info': {
		get: {
			tags: ['material.info'],
			summary: 'Get all material info',
			description: 'Get all material info',
			parameters: [
				SE.parameter_query('s_type', 's_type', [
					'rm',
					'accessories',
					'maintenance',
				]),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					section_uuid: SE.uuid(),
					section_name: SE.string('section 1'),
					type_uuid: SE.uuid(),
					type_name: SE.string('type 1'),
					name: SE.string('material 1'),
					short_name: SE.string('m1'),
					stock: SE.number(10.0),
					booking_quantity: SE.number(10.0),
					unit: SE.string('kg'),
					threshold: SE.number(10.0),
					description: SE.string('material 1'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
			},
		},

		post: {
			tags: ['material.info'],
			summary: 'Create a new material info',
			description: 'Create a new material info',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [],
			requestBody: SE.requestBody_schema_ref('material/info'),
			responses: {
				200: SE.response_schema_ref('material/info'),
				405: SE.response(405),
			},
		},
	},
	'/material/info/{uuid}': {
		get: {
			tags: ['material.info'],
			summary: 'Get material info by uuid',
			description: 'Get material info by uuid',
			produces: ['application/json'],
			parameters: [SE.parameter_params('material info to get', 'uuid')],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					section_uuid: SE.uuid(),
					section_name: SE.string('section 1'),
					type_uuid: SE.uuid(),
					type_name: SE.string('type 1'),
					name: SE.string('material 1'),
					short_name: SE.string('m1'),
					stock: SE.number(10.0),
					booking_quantity: SE.number(10.0),
					unit: SE.string('kg'),
					threshold: SE.number(10.0),
					description: SE.string('material 1'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.info'],
			summary: 'Update an existing material info',
			description: 'Update an existing material info',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material info to update', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('material/info'),
			responses: {
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.info'],
			summary: 'Delete a material info',
			description: 'Delete a material info',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material info to delete', 'uuid'),
			],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Section * //
export const pathMaterialSection = {
	'/material/section': {
		get: {
			tags: ['material.section'],
			summary: 'Get all material section',
			description: 'Get all material section',
			responses: {
				200: SE.response_schema_ref(200, 'material/section'),
			},
		},
		post: {
			tags: ['material.section'],
			summary: 'Create a new material section',
			description: 'Create a new material section',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_query('s_type', 's_type', [
					'rm',
					'accessories',
					'maintenance',
				]),
			],
			requestBody: SE.requestBody_schema_ref('material/section'),
			responses: {
				200: SE.response_schema_ref(200, 'material/section'),
				405: SE.response(405),
			},
		},
	},
	'/material/section/{uuid}': {
		get: {
			tags: ['material.section'],
			summary: 'Get material section by uuid',
			description: 'Get material section by uuid',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'material section to get',
					'uuid',
					'string'
				),
			],
			responses: {
				200: SE.response_schema_ref(200, 'material/section'),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.section'],
			summary: 'Update an existing material section',
			description: 'Update an existing material section',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'material section to update',
					'uuid',
					'string'
				),
			],
			requestBody: SE.requestBody_schema_ref('material/section'),
			responses: {
				200: SE.response_schema_ref(200, 'material/section'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.section'],
			summary: 'Delete a material section',
			description: 'Delete a material section',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'material section to delete',
					'uuid',
					'string'
				),
			],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Stock * //

export const pathMaterialStock = {
	'/material/stock': {
		get: {
			tags: ['material.stock'],
			summary: 'Get all material stock',
			description: 'Get all material stock',
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					lab_dip: SE.number(10.0),
					tape_making: SE.number(10.0),
					coil_forming: SE.number(10.0),
					dying_and_iron: SE.number(10.0),
					m_gapping: SE.number(10.0),
					v_gapping: SE.number(10.0),
					v_teeth_molding: SE.number(10.0),
					m_teeth_molding: SE.number(10.0),
					teeth_assembling_and_polishing: SE.number(10.0),
					m_teeth_cleaning: SE.number(10.0),
					v_teeth_cleaning: SE.number(10.0),
					plating_and_iron: SE.number(10.0),
					m_sealing: SE.number(10.0),
					v_sealing: SE.number(10.0),
					n_t_cutting: SE.number(10.0),
					v_t_cutting: SE.number(10.0),
					m_stopper: SE.number(10.0),
					v_stopper: SE.number(10.0),
					n_stopper: SE.number(10.0),
					cutting: SE.number(10.0),
					m_qc_and_packing: SE.number(10.0),
					v_qc_and_packing: SE.number(10.0),
					n_qc_and_packing: SE.number(10.0),
					s_qc_and_packing: SE.number(10.0),
					die_casting: SE.number(10.0),
					slider_assembly: SE.number(10.0),
					coloring: { type: 'string', example: 10.0 },
					remarks: SE.string('This is an entry'),
				}),
			},
		},
		post: {
			tags: ['material.stock'],
			summary: 'Create a new material stock',
			description: 'Create a new material stock',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [],
			requestBody: SE.requestBody_schema_ref('material/stock'),
			responses: {
				200: SE.response_schema_ref(200, 'material/stock'),
				405: SE.response(405),
			},
		},
	},

	'/material/stock/{uuid}': {
		get: {
			tags: ['material.stock'],
			summary: 'Get material stock by uuid',
			description: 'Get material stock by uuid',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material stock to get', 'uuid', 'string'),
			],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.stock'],
			summary: 'Update an existing material stock',
			description: 'Update an existing material stock',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'material stock to update',
					'uuid',
					'string'
				),
			],
			requestBody: SE.requestBody_schema_ref('material/stock'),
			responses: {
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.stock'],
			summary: 'Delete a material stock',
			description: 'Delete a material stock',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'material stock to delete',
					'uuid',
					'string'
				),
			],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/material/stock-threshold': {
		get: {
			tags: ['material.stock'],
			summary: 'Get all material stock below threshold',
			description: 'Get all material stock below threshold',
			responses: {
				200: SE.response_schema_ref(200, 'material/stock'),
			},
		},
	},
	'/material/stock/by/single-field/{fieldName}': {
		get: {
			tags: ['material.stock'],
			summary: 'Get material stock for a field name',
			description: 'Get material stock for a field name',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'field name to get material stock',
					'fieldName',
					'string',
					'stock'
				),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					fieldName: SE.number(10.0),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/material/stock/by/multi-field/{fieldNames}': {
		get: {
			tags: ['material.stock'],
			summary: 'Get material stock for multiple field names',
			description: 'Get material stock for multiple field names',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'fieldNames',
					'fieldNames',
					'string',
					'comma separated field names'
				),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					fieldNames: SE.number(10.0),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Trx * //
export const pathMaterialTrx = {
	'/material/trx': {
		get: {
			tags: ['material.trx'],
			summary: 'Get all material trx',
			description: 'Get all material trx',
			parameters: [
				SE.parameter_query('s_type', 's_type', [
					'rm',
					'accessories',
					'maintenance',
				]),
				SE.parameter_query('from_date', 'from_date', 'string'),
				SE.parameter_query('to_date', 'to_date', 'string'),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					trx_to: SE.string('tape_making'),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					user_designation: SE.string('admin'),
					user_department: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
					booking_uuid: SE.uuid(),
					booking_number: SE.string('MB24-0001'),
				}),
			},
		},
		post: {
			tags: ['material.trx'],
			summary: 'Create a new material trx',
			description: 'Create a new material trx',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [SE.requestBody_schema_ref('material/trx')],
			responses: {
				200: SE.response_schema_ref(200, 'material/trx'),
				405: SE.response(405),
			},
		},
	},
	'/material/trx/{uuid}': {
		get: {
			tags: ['material.trx'],
			summary: 'Get material trx by uuid',
			description: 'Get material trx by uuid',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material trx to get', 'uuid', 'string'),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					trx_to: SE.string('section'),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					user_designation: SE.string('admin'),
					user_department: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
					booking_uuid: SE.uuid(),
					booking_number: SE.string('MB24-0001'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.trx'],
			summary: 'Update an existing material trx',
			description: 'Update an existing material trx',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [SE.parameter_params('material trx to update', 'uuid')],
			requestBody: SE.requestBody({
				material_uuid: SE.uuid(),
				trx_to: SE.string('section'),
				trx_quantity: SE.number(10.0),
				created_by: SE.uuid(),
				created_at: SE.date_time(),
				updated_at: SE.date_time(),
				remarks: SE.string('This is an entry'),
				booking_uuid: SE.uuid(),
			}),
			responses: {
				200: SE.response_schema_ref(200, 'material/trx'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.trx'],
			summary: 'Delete a material trx',
			description: 'Delete a material trx',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				200: SE.response(200),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
	},
	'/material/trx/by/{material_uuid}/{trx_to}': {
		get: {
			tags: ['material.trx'],
			summary: 'Get selected material trx by material uuid and trx_to',
			description:
				'Get selected material trx by material uuid and trx_to',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material_uuid', 'material_uuid', 'string'),
				SE.parameter_params('trx_to', 'trx_to', 'string'),
			],
			responses: {
				200: SE.response_schema_ref(200, 'material/trx'),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Type * //
export const pathMaterialType = {
	'/material/type': {
		get: {
			tags: ['material.type'],
			summary: 'Get all material type',
			description: 'Get all material type',
			responses: {
				200: SE.response_schema_ref(200, 'material/type'),
			},
		},
		post: {
			tags: ['material.type'],
			summary: 'Create a new material type',
			description: 'Create a new material type',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [],
			requestBody: SE.requestBody_schema_ref('material/type'),
			responses: {
				200: SE.response_schema_ref('material/type'),
				405: SE.response(405),
			},
		},
	},
	'/material/type/{uuid}': {
		get: {
			tags: ['material.type'],
			summary: 'Get material type by uuid',
			description: 'Get material type by uuid',
			produces: ['application/json'],
			parameters: [SE.parameter_params('material type to get', 'uuid')],
			responses: {
				200: SE.response_schema_ref(200, 'material/type'),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.type'],
			summary: 'Update an existing material type',
			description: 'Update an existing material type',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material type to update', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('material/type'),
			responses: {
				200: SE.response_schema_ref(200, 'material/type'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.type'],
			summary: 'Delete a material type',
			description: 'Delete a material type',
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material type to delete', 'uuid'),
			],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Used * //
export const pathMaterialUsed = {
	'/material/used': {
		get: {
			tags: ['material.used'],
			summary: 'Get all material used',
			description: 'Get all material used',
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					lab_dip: SE.number(10.0),
					tape_making: SE.number(10.0),
					coil_forming: SE.number(10.0),
					dying_and_iron: SE.number(10.0),
					m_gapping: SE.number(10.0),
					v_gapping: SE.number(10.0),
					v_teeth_molding: SE.number(10.0),
					m_teeth_molding: SE.number(10.0),
					teeth_assembling_and_polishing: SE.number(10.0),
					m_teeth_cleaning: SE.number(10.0),
					v_teeth_cleaning: SE.number(10.0),
					plating_and_iron: SE.number(10.0),
					m_sealing: SE.number(10.0),
					v_sealing: SE.number(10.0),
					n_t_cutting: SE.number(10.0),
					v_t_cutting: SE.number(10.0),
					m_stopper: SE.number(10.0),
					v_stopper: SE.number(10.0),
					n_stopper: SE.number(10.0),
					cutting: SE.number(10.0),
					m_qc_and_packing: SE.number(10.0),
					v_qc_and_packing: SE.number(10.0),
					n_qc_and_packing: SE.number(10.0),
					s_qc_and_packing: SE.number(10.0),
					die_casting: SE.number(10.0),
					slider_assembly: SE.number(10.0),
					coloring: SE.number(10.0),
					used_quantity: SE.number(10.0),
					wastage: SE.number(10.0),
					section: SE.string('tape_making'),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
			},
		},
		post: {
			tags: ['material.used'],
			summary: 'Create a new material used',
			description: 'Create a new material used',
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('material/used'),
			responses: {
				200: SE.response_schema_ref(200, 'material/used'),
				405: SE.response(405),
			},
		},
	},
	'/material/used/{uuid}': {
		get: {
			tags: ['material.used'],
			summary: 'Get material used by uuid',
			description: 'Get material used by uuid',
			produces: ['application/json'],
			parameters: [SE.parameter_params('material used to get', 'uuid')],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					lab_dip: SE.number(10.0),
					tape_making: SE.number(10.0),
					coil_forming: SE.number(10.0),
					dying_and_iron: SE.number(10.0),
					m_gapping: SE.number(10.0),
					v_gapping: SE.number(10.0),
					v_teeth_molding: SE.number(10.0),
					m_teeth_molding: SE.number(10.0),
					teeth_assembling_and_polishing: SE.number(10.0),
					m_teeth_cleaning: SE.number(10.0),
					v_teeth_cleaning: SE.number(10.0),
					plating_and_iron: SE.number(10.0),
					m_sealing: SE.number(10.0),
					v_sealing: SE.number(10.0),
					n_t_cutting: SE.number(10.0),
					v_t_cutting: SE.number(10.0),
					m_stopper: SE.number(10.0),
					v_stopper: SE.number(10.0),
					n_stopper: SE.number(10.0),
					cutting: SE.number(10.0),
					m_qc_and_packing: SE.number(10.0),
					v_qc_and_packing: SE.number(10.0),
					n_qc_and_packing: SE.number(10.0),
					s_qc_and_packing: SE.number(10.0),
					die_casting: SE.number(10.0),
					slider_assembly: SE.number(10.0),
					coloring: SE.number(10.0),
					used_quantity: SE.number(10.0),
					wastage: SE.number(10.0),
					section: SE.string('section'),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
				400: {
					description: 'Invalid UUID supplied',
				},
				404: {
					description: 'Material used not found',
				},
			},
		},
		put: {
			tags: ['material.used'],
			summary: 'Update an existing material used',
			description: 'Update an existing material used',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('material used to update', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('material/used'),
			responses: {
				200: SE.response_schema_ref(200, 'material/used'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.used'],
			summary: 'Delete a material used',
			description: 'Delete a material used',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				200: {
					description: 'successful operation',
				},
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/material/used/by/{section}': {
		get: {
			tags: ['material.used'],
			summary: 'Get material used by section',
			description: 'Get material used by section',
			produces: ['application/json'],
			parameters: [SE.parameter_params('section', 'section', 'string')],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					lab_dip: SE.number(10.0),
					tape_making: SE.number(10.0),
					coil_forming: SE.number(10.0),
					dying_and_iron: SE.number(10.0),
					m_gapping: SE.number(10.0),
					v_gapping: SE.number(10.0),
					v_teeth_molding: SE.number(10.0),
					m_teeth_molding: SE.number(10.0),
					teeth_assembling_and_polishing: SE.number(10.0),
					m_teeth_cleaning: SE.number(10.0),
					v_teeth_cleaning: SE.number(10.0),
					plating_and_iron: SE.number(10.0),
					m_sealing: SE.number(10.0),
					v_sealing: SE.number(10.0),
					n_t_cutting: SE.number(10.0),
					v_t_cutting: SE.number(10.0),
					m_stopper: SE.number(10.0),
					v_stopper: SE.number(10.0),
					n_stopper: SE.number(10.0),
					cutting: SE.number(10.0),
					m_qc_and_packing: SE.number(10.0),
					v_qc_and_packing: SE.number(10.0),
					n_qc_and_packing: SE.number(10.0),
					s_qc_and_packing: SE.number(10.0),
					die_casting: SE.number(10.0),
					slider_assembly: SE.number(10.0),
					coloring: SE.number(10.0),
					used_quantity: SE.number(10.0),
					wastage: SE.number(10.0),
					section: SE.string('section'),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/material/used/multi-section/by/{sections}': {
		get: {
			tags: ['material.used'],
			summary: 'Get material used by sections',
			description: 'Get material used by sections',
			produces: ['application/json'],
			parameters: [
				{
					name: 'sections',
					in: 'path',
					description: ' sections to get',
					required: true,
					type: 'string',
					example: 'tape_making,coil_forming',
				},
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					stock: SE.number(10.0),
					lab_dip: SE.number(10.0),
					tape_making: SE.number(10.0),
					coil_forming: SE.number(10.0),
					dying_and_iron: SE.number(10.0),
					m_gapping: SE.number(10.0),
					v_gapping: SE.number(10.0),
					v_teeth_molding: SE.number(10.0),
					m_teeth_molding: SE.number(10.0),
					teeth_assembling_and_polishing: SE.number(10.0),
					m_teeth_cleaning: SE.number(10.0),
					v_teeth_cleaning: SE.number(10.0),
					plating_and_iron: SE.number(10.0),
					m_sealing: SE.number(10.0),
					v_sealing: SE.number(10.0),
					n_t_cutting: SE.number(10.0),
					v_t_cutting: SE.number(10.0),
					m_stopper: SE.number(10.0),
					v_stopper: SE.number(10.0),
					n_stopper: SE.number(10.0),
					cutting: SE.number(10.0),
					m_qc_and_packing: SE.number(10.0),
					v_qc_and_packing: SE.number(10.0),
					n_qc_and_packing: SE.number(10.0),
					s_qc_and_packing: SE.number(10.0),
					die_casting: SE.number(10.0),
					slider_assembly: SE.number(10.0),
					coloring: SE.number(10.0),
					used_quantity: SE.number(10.0),
					wastage: SE.number(10.0),
					section: SE.string('section'),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Material Stock To SFG * //

export const pathMaterialStockToSFG = {
	'/material/stock-to-sfg': {
		get: {
			tags: ['material.stock_to_sfg'],
			summary: 'Get all material stock_to_sfg',
			description: 'Get all material stock_to_sfg',
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					unit: SE.string('kg'),
					stock: SE.number(10.0),
					order_entry_uuid: SE.uuid(),
					order_description_uuid: SE.uuid(),
					trx_to: SE.string('tape_making'),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
					order_number: SE.string('Z24-0010'),
					item_description: SE.string('item description'),
					style: SE.string('st1'),
					color: SE.string('black'),
					size: SE.string('10'),
					style_color_size: SE.string('st1-black-10'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		post: {
			tags: ['material.stock_to_sfg'],
			summary: 'Create a new material stock_to_sfg',
			description: 'Create a new material stock_to_sfg',
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('material/stock_to_sfg'),
			responses: {
				200: SE.response_schema(200, 'material/stock_to_sfg'),
				400: SE.response(400),
				405: SE.response(405),
			},
		},
	},
	'/material/stock-to-sfg/{uuid}': {
		get: {
			tags: ['material.stock_to_sfg'],
			summary: 'Get material stock_to_sfg by uuid',
			description: 'Get material stock_to_sfg by uuid',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					unit: SE.string('kg'),
					stock: SE.number(10.0),
					order_entry_uuid: SE.uuid(),
					order_description_uuid: SE.uuid(),
					trx_to: SE.string('tape_making'),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
					order_number: SE.string('Z24-0010'),
					item_description: SE.string('item description'),
					style: SE.string('st1'),
					color: SE.string('black'),
					size: SE.string('10'),
					style_color_size: SE.string('st1-black-10'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.stock_to_sfg'],
			summary: 'Update an existing material stock_to_sfg',
			description: 'Update an existing material stock_to_sfg',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			requestBody: SE.requestBody_schema_ref('material/stock_to_sfg'),
			responses: {
				200: SE.response_schema(200, 'material/stock_to_sfg'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.stock_to_sfg'],
			summary: 'Delete a material stock_to_sfg',
			description: 'Delete a material stock_to_sfg',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

export const pathMaterialBooking = {
	'/material/booking': {
		get: {
			tags: ['material.booking'],
			summary: 'Get all material booking',
			description: 'Get all material booking',
			parameters: [
				SE.parameter_query('s_type', 's_type', [
					'rm',
					'accessories',
					'maintenance',
				]),
				SE.parameter_query('from_date', 'from_date', 'date'),
				SE.parameter_query('to_date', 'to_date', 'date'),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					id: SE.number(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing 1'),
					quantity: SE.number(10.0),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string(),
					store_type: SE.string('rm'),
				}),
			},
		},
		post: {
			tags: ['material.booking'],
			summary: 'Create a new material booking',
			description: 'Create a new material booking',
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('material/booking'),
			responses: {
				200: SE.response_schema(200, 'material/booking'),
				400: SE.response(400),
				405: SE.response(405),
			},
		},
	},

	'/material/booking/{uuid}': {
		get: {
			tags: ['material.booking'],
			summary: 'Get material booking by uuid',
			description: 'Get material booking by uuid',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					id: SE.number(),
					material_uuid: SE.uuid(),
					material_name: SE.string('material 1'),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing 1'),
					quantity: SE.number(10.0),
					trx_quantity: SE.number(10.0),
					created_by: SE.uuid(),
					created_by_name: SE.string('admin'),
					created_at: SE.date_time(),
					updated_at: SE.date_time(),
					remarks: SE.string('This is an entry'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['material.booking'],
			summary: 'Update an existing material booking',
			description: 'Update an existing material booking',
			consumes: ['application/json'],
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			requestBody: SE.requestBody_schema_ref('material/booking'),
			responses: {
				200: SE.response_schema(200, 'material/booking'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['material.booking'],
			summary: 'Delete a material booking',
			description: 'Delete a material booking',
			produces: ['application/json'],
			parameters: [SE.parameter_params('uuid', 'uuid', 'string')],
			responses: {
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

export const pathMaterial = {
	...pathMaterialInfo,
	...pathMaterialSection,
	...pathMaterialStock,
	...pathMaterialTrx,
	...pathMaterialType,
	...pathMaterialUsed,
	...pathMaterialStockToSFG,
	...pathMaterialBooking,
};
